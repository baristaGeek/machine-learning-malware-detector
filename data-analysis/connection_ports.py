# Train model and make predictions
import numpy
from numpy import argmax
import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline

# fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)

# load dataset
dataframe = pandas.read_csv("binaryLabeledConectionPortsWithUDP.csv", header=None)
test_dataframe = pandas.read_csv("binaryUnlabeledConectionPortsWithUDP.csv", header=None)

# Protocol
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[0])],axis=1).drop([0],axis=1)
test_dataframe = pandas.concat([test_dataframe,pandas.get_dummies(test_dataframe[0])],axis=1).drop([0],axis=1)

# Local Address
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[1], prefix='local_address')],axis=1).drop([1],axis=1)
test_dataframe = pandas.concat([test_dataframe,pandas.get_dummies(test_dataframe[1], prefix='local_address')],axis=1).drop([1],axis=1)

# Foreign address
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[2], prefix='foreign_address')],axis=1).drop([2],axis=1)
test_dataframe = pandas.concat([test_dataframe,pandas.get_dummies(test_dataframe[2], prefix='foreign_address')],axis=1).drop([2],axis=1)

# State
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[3], prefix='state')],axis=1).drop([3],axis=1)
test_dataframe = pandas.concat([test_dataframe,pandas.get_dummies(test_dataframe[3], prefix='state')],axis=1).drop([3],axis=1)

# PID
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[4], prefix='PID')],axis=1).drop([4],axis=1)
test_dataframe = pandas.concat([test_dataframe,pandas.get_dummies(test_dataframe[4], prefix='PID')],axis=1).drop([4],axis=1)
# TODO: Have a statistical argument for dropping or not this column


# Offload state
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[5], prefix='offload_state')],axis=1).drop([5],axis=1)
test_dataframe = pandas.concat([test_dataframe,pandas.get_dummies(test_dataframe[5], prefix='offload_state')],axis=1).drop([5],axis=1)

# Change each column name for its index
for column in dataframe:
	dataframe.rename(columns={column: dataframe.columns.get_loc(column)}, inplace=True)
    	print (column)

for column in test_dataframe:
    test_dataframe.rename(columns={column: test_dataframe.columns.get_loc(column)}, inplace=True)

# Make input size variable because one-hot encoding generates a dataset with a variable amount of dimensions
training_input_size = (len(dataframe.columns) - 1)
test_input_size = (len(test_dataframe.columns) - 1)

training_dataset = dataframe.values
training_X = training_dataset[:,1:training_input_size].astype(float) #changed :,0 to :,1
training_Y = training_dataset[:,0]

test_dataset = test_dataframe.values
test_X = test_dataset[:,1:test_input_size].astype(float)
test_Y = test_dataset[:,0]	

model = Sequential()
model.add(Dense(8, input_dim=(training_input_size-1), activation='relu')) #input_dim must be variable due to one-hot encoding
model.add(Dense(1, activation='softmax')) # 1 because it's either malign or benign, so we can use binary_crossentropy
# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(training_X, training_Y, epochs=4)
print("prediction:")
print(model.predict(test_X)[0])
