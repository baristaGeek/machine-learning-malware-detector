# Train model and make predictions
import numpy
from numpy import argmax
import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline

# fix random seed for reproducibility
seed = 7
numpy.random.seed(seed)

# load dataset
dataframe = pandas.read_csv("labeledConectionPorts.csv", header=None)
dataset = dataframe.values
# X = dataset[:,1:69].astype(float) # excluding the process name and ID features
# Y = dataset[:,69]

print("dataframe.head(): ")
print(dataframe.head())

# Protocol
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[0], prefix='protocol')],axis=1).drop([0],axis=1)
# print("new df:")
# print(dataframe.head())
# print("df[protocol TCP]")
# print(dataframe['protocol_TCP'])

# Local Address
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[1], prefix='local_address')],axis=1).drop([1],axis=1)
# print("new df:")
# print(dataframe.head())
# print("df[local address 0.0.0.0:135]")
# print(dataframe['local_address_TCP'])

# Foreign address
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[2], prefix='foreign_address')],axis=1).drop([2],axis=1)
# print("new df:")
# print(dataframe.head())
# print("df[foreign address 0.0.0.0:0")
# print(dataframe['foreign_address_0.0.0.0:0'])

# State
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[3], prefix='state')],axis=1).drop([3],axis=1)
# print("new df:")
# print(dataframe.head())
# print("df[state LISTENING")
# print(dataframe['state_LISTENING'])

# PID
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[4], prefix='PID')],axis=1).drop([4],axis=1)
# print("new df:")
# print(dataframe.head())
# print("df[PID 672]")
# print(dataframe['PID_672'])

# Offload state
dataframe = pandas.concat([dataframe,pandas.get_dummies(dataframe[5], prefix='offload_state')],axis=1).drop([5],axis=1)
print("final dataframe:")
print(dataframe.head())
print("df[offload_state InHost]")
print(dataframe['offload_state_InHost'])

# X = dataset[:,1:69].astype(float)
X = dataset['protocol_TCP'].astype(float)
Y = dataset[:,6]

# encode benign and malign as integers
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)

# convert integers to dummy variables (i.e. one hot encoded)
dummy_y = np_utils.to_categorical(encoded_Y)


# define baseline model
def baseline_model():
	# create model
	model = Sequential()
	model.add(Dense(8, input_dim=68, activation='relu')) #input_dim must me variable due to one-hot encoding
	model.add(Dense(3, activation='softmax'))
	# Compile model
	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
	return model
estimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)

kfold = KFold(n_splits=10, shuffle=True, random_state=seed)
results = cross_val_score(estimator, X, dummy_y, cv=kfold)
print("Baseline: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))